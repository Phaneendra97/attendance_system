<!DOCTYPE html>
<html lang="en">
<head>
<script
  src="https://code.jquery.com/jquery-3.4.1.min.js"
  integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo="
  crossorigin="anonymous"></script>
 <meta charset="UTF-8">
 <meta name="viewport" content="width=device-width, initial-scale=1.0">
 <meta http-equiv="X-UA-Compatible" content="ie=edge">
 <title>Sign up</title>
 <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css">
 <link rel="stylesheet" 
 href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css">
 <style>
  html{
   padding:50px;
  }
 </style>
</head>
<body>
 <div  class="container">
  <div class="col-sm-6 col-sm-offset-3">
   <h2>Check-out for lunch</h2>

   <% if(message.length > 0) { %>
    <div class="alert alert-danger"><%= message %></div> 
   <% } %>

   <form action="/luncho" method="post">
    <div class="form-group">
     <label>Username</label>
     <input type="text" id="username" class="form-control" name="username">
    </div>
    <div class="form-group">
     <label>Password</label>
     <input type="password" class="form-control" name="password">
    </div>

   <div class="app">

    <a href="#" id="start-camera" class="visible" style = "visibility: hidden">Touch here to start the app.</a>
    <video width="480" height="320" id="camera-stream"></video>
    
    <img width="0" height="0" id="snap">
    <div id="can">
    <canvas id="canvas">
    </canvas> 
    </div>
    <p id="error-message"></p>

    <div class="controls">
      <a  class = "btn btn-info" href="#" id="take-photo" title="Take Photo" onclick="snap.style.visibility='hidden';"><i class="material-icons">camera</i></a>
      <a  class = "btn btn-info" href = "#" id = "saveas" onclick="saveAs()">Save</a> 
      <a href="#" id="delete-photo" title="Delete Photo" style = "visibility: hidden" class="disabled"><i class="material-icons">delete</i></a>
      <a href="#" id="download-photo" download="selfie.png" style = "visibility: hidden" title="Save Photo" class="disabled"><i class="material-icons">file_download</i></a> 
      
           </div>
     

    <!-- Hidden canvas element. Used for taking snapshot of video. -->
    

  </div>
<br>
<button type="submit"  class="btn btn-succcess btn-lg">Check-out for lunch</button>  
    
    
    
   </form>
     
  
  </div>
 

<p>Go Back <a  class = "btn btn-info" href="/">Home</a>.</p>
 </div>
 
 <script>
function saveAs() {
    console.log("here at saveas");
   var canvas = document.getElementById('canvas');
var dataURL = canvas.toDataURL();
console.log(dataURL);
     var date = new Date();
     var d = date.toISOString().slice(0, 19).replace(/-/g, "");
     var hrs = date.getHours();
     var min = date.getMinutes();
     console.log(d);
     day = d.slice(6,8);
     month = d.slice(4,6);
     year = d.slice(0,4);
     console.log(day,month,year,hrs,min);
    var link = document.createElement('a');
link.href = dataURL;
link.download = hrs+"'"+min+"-"+day+"-"+month+"-"+year+".jpg";
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}




 document.addEventListener('DOMContentLoaded', function () {

    // References to all the element we will need.
    var video = document.querySelector('#camera-stream'),
        image = document.querySelector('#snap'),
        start_camera = document.querySelector('#start-camera'),
        controls = document.querySelector('.controls'),
        take_photo_btn = document.querySelector('#take-photo'),
        delete_photo_btn = document.querySelector('#delete-photo'),
        download_photo_btn = document.querySelector('#download-photo'),
        error_message = document.querySelector('#error-message');
        
       

    // The getUserMedia interface is used for handling camera input.
    // Some browsers need a prefix so here we're covering all the options
    navigator.getMedia = ( navigator.getUserMedia ||
    navigator.webkitGetUserMedia ||
    navigator.mediaDevices.GetUserMedia ||
    navigator.msGetUserMedia);


    if(!navigator.getMedia){
        displayErrorMessage("Your browser doesn't have support for the navigator.getUserMedia interface.");
    }
    else{

        // Request the camera.
        navigator.getMedia(
            {
                video: true
            },
            // Success Callback
            function(stream){

                // Create an object URL for the video stream and
                // set it as src of our HTLM video element.
                video.srcObject = stream;

                // Play the video element to start the stream.
                video.play();
                video.onplay = function() {
                    showVideo();
                };
         
            },
            // Error Callback
            function(err){
                displayErrorMessage("There was an error with accessing the camera stream: " + err.name, err);
            }
        );

    }



    // Mobile browsers cannot play video without user input,
    // so here we're using a button to start it manually.
    start_camera.addEventListener("click", function(e){

        e.preventDefault();

        // Start video playback manually.
        video.play();
        showVideo();

    });


    take_photo_btn.addEventListener("click", function(e){

        e.preventDefault();

        var snap = takeSnapshot();

        // Show image. 
        image.setAttribute('src', snap);
        image.classList.add("visible");

        // Enable delete and save buttons
        delete_photo_btn.classList.remove("disabled");
        download_photo_btn.classList.remove("disabled");

        // Set the href attribute of the download button to the snap url.
        download_photo_btn.href = snap;

        // Pause video playback of stream.
        video.pause();

    });


    delete_photo_btn.addEventListener("click", function(e){

        e.preventDefault();

        // Hide image.
        image.setAttribute('src', "");
        image.classList.remove("visible");

        // Disable delete and save buttons
        delete_photo_btn.classList.add("disabled");
        download_photo_btn.classList.add("disabled");

        // Resume playback of stream.
        video.play();

    });


  
    function showVideo(){
        // Display the video stream and the controls.

        hideUI();
        video.classList.add("visible");
        controls.classList.add("visible");
    }


    function takeSnapshot(){
        // Here we're using a trick that involves a hidden canvas element.  

        var hidden_canvas = document.querySelector('canvas'),
            context = hidden_canvas.getContext('2d');

        var width = video.videoWidth,
            height = video.videoHeight;

        if (width && height) {

            // Setup a canvas with the same dimensions as the video.
            hidden_canvas.width = width;
            hidden_canvas.height = height;

            // Make a copy of the current frame in the video on the canvas.
            context.drawImage(video, 0, 0, width, height);

            // Turn the canvas image into a dataURL that can be used as a src for our photo.
            return hidden_canvas.toDataURL('image/png');
        }
    }


    function displayErrorMessage(error_msg, error){
        error = error || "";
        if(error){
            console.error(error);
        }

        error_message.innerText = error_msg;

        hideUI();
        error_message.classList.add("visible");
    }

   
    function hideUI(){
        // Helper function for clearing the app UI.

        controls.classList.remove("visible");
        start_camera.classList.remove("visible");
        video.classList.remove("visible");
        snap.classList.remove("visible");
        error_message.classList.remove("visible");
    }

});
</script>
</body>
</html>